{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":18858,"sourceType":"datasetVersion","datasetId":13996},{"sourceId":6985876,"sourceType":"datasetVersion","datasetId":4014880}],"dockerImageVersionId":30587,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/monicaghuge/notebookd1fd423657?scriptVersionId=152958052\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:14.911876Z","iopub.execute_input":"2023-11-29T13:11:14.912334Z","iopub.status.idle":"2023-11-29T13:11:14.918837Z","shell.execute_reply.started":"2023-11-29T13:11:14.912297Z","shell.execute_reply":"2023-11-29T13:11:14.917388Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv')","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:14.921046Z","iopub.execute_input":"2023-11-29T13:11:14.921493Z","iopub.status.idle":"2023-11-29T13:11:15.026265Z","shell.execute_reply.started":"2023-11-29T13:11:14.921454Z","shell.execute_reply":"2023-11-29T13:11:15.025337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head(4).T","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.028302Z","iopub.execute_input":"2023-11-29T13:11:15.029025Z","iopub.status.idle":"2023-11-29T13:11:15.059076Z","shell.execute_reply.started":"2023-11-29T13:11:15.028983Z","shell.execute_reply":"2023-11-29T13:11:15.057699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cat_cols = ['gender','Dependents','MultipleLines','StreamingTV','StreamingMovies',\n           'Contract','Partner','PhoneService','InternetService','OnlineSecurity',\n           'OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','PaperlessBilling',\n           'PaymentMethod']\n","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.060831Z","iopub.execute_input":"2023-11-29T13:11:15.061308Z","iopub.status.idle":"2023-11-29T13:11:15.067727Z","shell.execute_reply.started":"2023-11-29T13:11:15.06124Z","shell.execute_reply":"2023-11-29T13:11:15.066561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['TotalCharges']=pd.to_numeric(df['TotalCharges'],errors='coerce').astype('float64')","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.071067Z","iopub.execute_input":"2023-11-29T13:11:15.07189Z","iopub.status.idle":"2023-11-29T13:11:15.095399Z","shell.execute_reply.started":"2023-11-29T13:11:15.071843Z","shell.execute_reply":"2023-11-29T13:11:15.094043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['TotalCharges'].isnull().sum()\n","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.09722Z","iopub.execute_input":"2023-11-29T13:11:15.098009Z","iopub.status.idle":"2023-11-29T13:11:15.111743Z","shell.execute_reply.started":"2023-11-29T13:11:15.097962Z","shell.execute_reply":"2023-11-29T13:11:15.110558Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['TotalCharges'].dtypes","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.113497Z","iopub.execute_input":"2023-11-29T13:11:15.114275Z","iopub.status.idle":"2023-11-29T13:11:15.122945Z","shell.execute_reply.started":"2023-11-29T13:11:15.114212Z","shell.execute_reply":"2023-11-29T13:11:15.121772Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#df.log[df['tenure'] == 0, ['tenure', 'TotalCharges']]\n","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.124871Z","iopub.execute_input":"2023-11-29T13:11:15.125666Z","iopub.status.idle":"2023-11-29T13:11:15.132687Z","shell.execute_reply.started":"2023-11-29T13:11:15.125618Z","shell.execute_reply":"2023-11-29T13:11:15.131316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.13451Z","iopub.execute_input":"2023-11-29T13:11:15.13532Z","iopub.status.idle":"2023-11-29T13:11:15.162204Z","shell.execute_reply.started":"2023-11-29T13:11:15.135271Z","shell.execute_reply":"2023-11-29T13:11:15.161001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df.dropna()","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.164076Z","iopub.execute_input":"2023-11-29T13:11:15.164564Z","iopub.status.idle":"2023-11-29T13:11:15.194447Z","shell.execute_reply.started":"2023-11-29T13:11:15.164518Z","shell.execute_reply":"2023-11-29T13:11:15.1932Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['TotalCharges'].isnull().sum() ","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.198901Z","iopub.execute_input":"2023-11-29T13:11:15.200278Z","iopub.status.idle":"2023-11-29T13:11:15.209985Z","shell.execute_reply.started":"2023-11-29T13:11:15.200197Z","shell.execute_reply":"2023-11-29T13:11:15.20858Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# replace redundant values\ndf.replace({'No phone service':'No',\n            'No internet service':'No'},\n            inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:45.19139Z","iopub.execute_input":"2023-11-29T13:11:45.191801Z","iopub.status.idle":"2023-11-29T13:11:45.201971Z","shell.execute_reply.started":"2023-11-29T13:11:45.19177Z","shell.execute_reply":"2023-11-29T13:11:45.200646Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.drop(columns=['customerID'],inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:47.495013Z","iopub.execute_input":"2023-11-29T13:11:47.495462Z","iopub.status.idle":"2023-11-29T13:11:47.542002Z","shell.execute_reply.started":"2023-11-29T13:11:47.495428Z","shell.execute_reply":"2023-11-29T13:11:47.540147Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Churn'].replace({'Yes':'1','No':'0'},inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.272184Z","iopub.execute_input":"2023-11-29T13:11:15.273515Z","iopub.status.idle":"2023-11-29T13:11:15.292986Z","shell.execute_reply.started":"2023-11-29T13:11:15.273463Z","shell.execute_reply":"2023-11-29T13:11:15.291683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Churn']","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.295632Z","iopub.execute_input":"2023-11-29T13:11:15.296274Z","iopub.status.idle":"2023-11-29T13:11:15.309846Z","shell.execute_reply.started":"2023-11-29T13:11:15.296204Z","shell.execute_reply":"2023-11-29T13:11:15.308438Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nnumerical_columns = ['tenure', 'MonthlyCharges', 'TotalCharges']\n\n# Create a StandardScaler object\nscaler = StandardScaler()\n\n# Fit and transform the selected columns\ndf[numerical_columns] = scaler.fit_transform(df[numerical_columns])","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:22:04.445606Z","iopub.execute_input":"2023-11-29T13:22:04.446033Z","iopub.status.idle":"2023-11-29T13:22:04.4896Z","shell.execute_reply.started":"2023-11-29T13:22:04.446003Z","shell.execute_reply":"2023-11-29T13:22:04.487539Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[numerical_columns]","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:22:51.9605Z","iopub.execute_input":"2023-11-29T13:22:51.960926Z","iopub.status.idle":"2023-11-29T13:22:52.000095Z","shell.execute_reply.started":"2023-11-29T13:22:51.960896Z","shell.execute_reply":"2023-11-29T13:22:51.998587Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply one-hot encoding to each categorical variable\ndf = pd.get_dummies(df,cat_cols ,drop_first=True,dtype=int)\n\n# Display the first few rows of the encoded dataset\ndf","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.47168Z","iopub.execute_input":"2023-11-29T13:11:15.473076Z","iopub.status.idle":"2023-11-29T13:11:15.54808Z","shell.execute_reply.started":"2023-11-29T13:11:15.473023Z","shell.execute_reply":"2023-11-29T13:11:15.546668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.55017Z","iopub.execute_input":"2023-11-29T13:11:15.551037Z","iopub.status.idle":"2023-11-29T13:11:15.58531Z","shell.execute_reply.started":"2023-11-29T13:11:15.550989Z","shell.execute_reply":"2023-11-29T13:11:15.584059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.586748Z","iopub.execute_input":"2023-11-29T13:11:15.587917Z","iopub.status.idle":"2023-11-29T13:11:15.617923Z","shell.execute_reply.started":"2023-11-29T13:11:15.587877Z","shell.execute_reply":"2023-11-29T13:11:15.616752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr_matrix = df.corr().round(3)\n\nmask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n\nfig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(corr_matrix, vmin=-1, vmax=1, cbar=False,\n            cmap='coolwarm', linewidth=1, mask=mask,\n            square=True, annot=True, annot_kws={'fontsize':16}, ax=ax)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:15.619397Z","iopub.execute_input":"2023-11-29T13:11:15.620321Z","iopub.status.idle":"2023-11-29T13:11:17.290957Z","shell.execute_reply.started":"2023-11-29T13:11:15.620278Z","shell.execute_reply":"2023-11-29T13:11:17.289798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"num_cols=['tenure','TotalCharges','MonthlyCharges']","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:17.2927Z","iopub.execute_input":"2023-11-29T13:11:17.293794Z","iopub.status.idle":"2023-11-29T13:11:17.299753Z","shell.execute_reply.started":"2023-11-29T13:11:17.293751Z","shell.execute_reply":"2023-11-29T13:11:17.298399Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#X = df.iloc[:,0:-1]\n#y = df.iloc[:,-1]","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:17.301731Z","iopub.execute_input":"2023-11-29T13:11:17.302101Z","iopub.status.idle":"2023-11-29T13:11:17.311822Z","shell.execute_reply.started":"2023-11-29T13:11:17.302071Z","shell.execute_reply":"2023-11-29T13:11:17.310385Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=21)\n#print('shape of X',X_train.shape)\n#print('shape of y',y_train.shape)\n#print('shape of X',X_test.shape)\n#print('shape of y',y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:17.313446Z","iopub.execute_input":"2023-11-29T13:11:17.313956Z","iopub.status.idle":"2023-11-29T13:11:17.325182Z","shell.execute_reply.started":"2023-11-29T13:11:17.31391Z","shell.execute_reply":"2023-11-29T13:11:17.3237Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\nX = df.loc[:, df.columns != 'Churn']  \ny = df.loc[:, 'Churn']  \n\n# Print the results\nprint(\"X (Features):\")\nprint(X)\n\nprint(\"\\ny (Target variable):\")\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:12:13.583201Z","iopub.execute_input":"2023-11-29T13:12:13.583651Z","iopub.status.idle":"2023-11-29T13:12:13.802634Z","shell.execute_reply.started":"2023-11-29T13:12:13.583619Z","shell.execute_reply":"2023-11-29T13:12:13.800749Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=21)\nprint('shape of X',X_train.shape)\nprint('shape of y',y_train.shape)\nprint('shape of X',X_test.shape)\nprint('shape of y',y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.748125Z","iopub.status.idle":"2023-11-29T13:11:19.748606Z","shell.execute_reply.started":"2023-11-29T13:11:19.748386Z","shell.execute_reply":"2023-11-29T13:11:19.748408Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:12:19.651531Z","iopub.execute_input":"2023-11-29T13:12:19.651934Z","iopub.status.idle":"2023-11-29T13:12:20.430777Z","shell.execute_reply.started":"2023-11-29T13:12:19.651903Z","shell.execute_reply":"2023-11-29T13:12:20.429421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import HistGradientBoostingClassifier\n\n# Apply SMOTE to the training data\nsmote = SMOTE(random_state=42)\nX_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n\n# Create and train the HistGradientBoostingClassifier\nclf = HistGradientBoostingClassifier(random_state=42)\nclf.fit(X_train_smote, y_train_smote)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)\n\n# Evaluate the model\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:12:25.211475Z","iopub.execute_input":"2023-11-29T13:12:25.212874Z","iopub.status.idle":"2023-11-29T13:12:25.278174Z","shell.execute_reply.started":"2023-11-29T13:12:25.212832Z","shell.execute_reply":"2023-11-29T13:12:25.276305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print the value_counts on the original labels y\nprint(pd.value_counts(pd.Series(y)))\n\n# Print the value_counts\nprint(pd.value_counts(pd.Series(y_train_smote)))\n\n# Run compare_plot","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.754973Z","iopub.status.idle":"2023-11-29T13:11:19.755481Z","shell.execute_reply.started":"2023-11-29T13:11:19.755239Z","shell.execute_reply":"2023-11-29T13:11:19.755284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display the class distribution before SMOTE\nprint(\"Class distribution before SMOTE:\")\nprint(df['Churn'].value_counts())\n\n# Separate features and target variable\nX = df.drop('Churn', axis=1)\ny = df['Churn']\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Apply SMOTE to the training set\nsmote = SMOTE(random_state=42)\nX_resampled, y_resampled = smote.fit_resample(X_train, y_train)\n\n# Display the class distribution after SMOTE\nprint(\"\\nClass distribution after SMOTE:\")\nprint(pd.Series(y_resampled).value_counts())","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.757176Z","iopub.status.idle":"2023-11-29T13:11:19.7581Z","shell.execute_reply.started":"2023-11-29T13:11:19.75785Z","shell.execute_reply":"2023-11-29T13:11:19.75788Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.pairplot(df,size=4,diag_kind=\"hist\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.759862Z","iopub.status.idle":"2023-11-29T13:11:19.76034Z","shell.execute_reply.started":"2023-11-29T13:11:19.760099Z","shell.execute_reply":"2023-11-29T13:11:19.76012Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"num_cols=['tenure','TotalCharges','MonthlyCharges']","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.762463Z","iopub.status.idle":"2023-11-29T13:11:19.763175Z","shell.execute_reply.started":"2023-11-29T13:11:19.762964Z","shell.execute_reply":"2023-11-29T13:11:19.762986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the distribution of the target variable before and after SMOTE\nplt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.countplot(x='num_cols', data=df)\nplt.title('Distribution of Churn (Before SMOTE)')\n\nplt.subplot(1, 2, 2)\nsns.countplot(x='num_cols', data=resampled_data)\nplt.title('Distribution of Churn (After SMOTE)')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.764515Z","iopub.status.idle":"2023-11-29T13:11:19.765284Z","shell.execute_reply.started":"2023-11-29T13:11:19.765044Z","shell.execute_reply":"2023-11-29T13:11:19.765066Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nX = df.loc[:,:'Churn']  \ny = df.loc[:, 'Churn']  \n\n# Print the results\nprint(\"X (Features):\")\nprint(X)\n\nprint(\"\\ny (Target variable):\")\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:12:47.201701Z","iopub.execute_input":"2023-11-29T13:12:47.202138Z","iopub.status.idle":"2023-11-29T13:12:47.436858Z","shell.execute_reply.started":"2023-11-29T13:12:47.202102Z","shell.execute_reply":"2023-11-29T13:12:47.43473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=21)\nprint('shape of X',X_train.shape)\nprint('shape of y',y_train.shape)\nprint('shape of X',X_test.shape)\nprint('shape of y',y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:12:58.351593Z","iopub.execute_input":"2023-11-29T13:12:58.352049Z","iopub.status.idle":"2023-11-29T13:12:58.390197Z","shell.execute_reply.started":"2023-11-29T13:12:58.352012Z","shell.execute_reply":"2023-11-29T13:12:58.388531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=21)\nprint('shape of X',X_train.shape)\nprint('shape of y',y_train.shape)\nprint('shape of X',X_test.shape)\nprint('shape of y',y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.770812Z","iopub.status.idle":"2023-11-29T13:11:19.771544Z","shell.execute_reply.started":"2023-11-29T13:11:19.771318Z","shell.execute_reply":"2023-11-29T13:11:19.771341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print the value_counts on the original labels y\nprint(pd.value_counts(pd.Series(y)))\n\n# Print the value_counts\nprint(pd.value_counts(pd.Series(y_train_smote)))\n\n# Run compare_plot","metadata":{"execution":{"iopub.status.busy":"2023-11-29T13:11:19.772878Z","iopub.status.idle":"2023-11-29T13:11:19.773601Z","shell.execute_reply.started":"2023-11-29T13:11:19.77337Z","shell.execute_reply":"2023-11-29T13:11:19.773393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}